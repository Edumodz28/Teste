_G.Farm = true --[[ true // start or false // stop]]--

--[[ CHECK QUEST ]]--
function Quest()
    local level = game:GetService("Players").LocalPlayer.PlayerStats.lvl.Value
    local playerPos = game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.Position

    -- Define o nível máximo para duas vezes o nível do jogador
    local maxLevel = level + 2

    -- Loop através dos monstros e encontra um alvo adequado
    local target = nil
    local minDistance = math.huge

    for _, monster in ipairs(game:GetService("Workspace").Monster.Mon:GetChildren()) do
        local monLevel = tonumber(monster.Name:match("%d+")) or 0

        -- Verifica se o nível do monstro está dentro do intervalo adequado
        if monLevel <= level or monLevel >= maxLevel then
            local distance = (monster.Position - playerPos).magnitude
            if distance < minDistance then
                minDistance = distance
                target = monster
            end
        end
    end

    return target
end

--[[ AUTO FARM + LOOP ]]--
while wait() do
    pcall(function()
        if _G.Farm then
            local target = Quest()

            if target then
                repeat
                    wait()
                    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = target.HumanoidRootPart.CFrame * CFrame.new(0, 0, 2) 
                    game:GetService("VirtualUser"):ClickButton1(Vector2.new(500,0))
                until _G.Farm == false or not target.Parent or target.Humanoid.Health <= 0
            else
                print("Nenhum alvo encontrado.")
                _G.Farm = false -- Pare o farming se nenhum alvo for encontrado
            end
        end
    end)
end
